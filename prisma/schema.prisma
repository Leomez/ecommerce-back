// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// modelo categoria
model Category {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  products ProductCategory[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// modelo producto
model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float  
  stock       Int      @default(0)
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categories ProductCategory[]
}

// tabla intermedia para la relaciÃ³n muchos a muchos entre productos y categorÃ­as
model ProductCategory {
  productId  Int
  categoryId Int
  assignedAt DateTime @default(now())

  product  Product  @relation(fields: [productId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([productId, categoryId]) // ðŸ”’ evita duplicados
}

// modelo usuario
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 
// modelo orden
// model Order {
//   id         Int        @id @default(autoincrement())
//   userId     Int
//   total      Float
//   status     String     @default("PENDING") // PENDING, COMPLETED, CANCELLED
//   createdAt  DateTime   @default(now())
//   updatedAt  DateTime   @updatedAt
//   user       User       @relation(fields: [userId], references: [id])
//   orderItems OrderItem[]
// }
// // modelo item de orden
// model OrderItem {
//   id        Int      @id @default(autoincrement())
//   orderId   Int
//   productId Int
//   quantity  Int      @default(1)
//   price     Float
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   order     Order    @relation(fields: [orderId], references: [id])
//   product   Product  @relation(fields: [productId], references: [id])
// }

